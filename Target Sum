class Solution {
public:
    int findTargetSumWays(vector<int>& nums, int S) {
        long sum=0;
        int n=nums.size(), cnt=0;
        for(int i=0;i<n;i++){
            sum+=nums[i];
            if(nums[i]==0) cnt++;
        } 
        if(sum<S || (sum+S) & 1) return 0;
        long target=(sum+S)/2;
        
        int dp[n+1][target+1];
        for(int i=0;i<=n;i++) dp[i][0]=1;
        for(int j=1;j<=target;j++) dp[0][j]=0;
        
        for(int i=1;i<=n;i++){
            for(int j=1;j<=target;j++){
                if(nums[i-1] == 0){
                    dp[i][j] = dp[i-1][j];
                }
                else if(nums[i-1]<=j){
                    dp[i][j]=dp[i-1][j-nums[i-1]]+dp[i-1][j];
                }else{
                    dp[i][j]=dp[i-1][j];
                }
            }
        }
        return pow(2,cnt)*dp[n][target];
    }
};
