//4 ms, faster than 91.00% of C++ online submissions for Search in Rotated Sorted Array.
int binarySearch(vector<int>& nums, int p, int r, int num) {
       while (p <= r) {
          int mid = p + (r-p)/2;
          if (nums[mid] == num)
            return mid ;
          else if (nums[mid] > num)
            r= mid-1;
          else if (nums[mid] < num)
            p=mid+1;
       }
       return -1;
    }
    int search(vector<int>& nums, int target) {
        int size = nums.size(),res, value1, value2,index=-1;
        if(size==1){
            if(nums[0]!=target) return -1;
            else return 0;
        }
        for(int i=0;i<size-1;i++){
            if(nums[i+1]<nums[i]){
                index=i+1;
                break;
            }
        }
        if(index>0){
            value1=binarySearch(nums,0,index,target);
            value2=binarySearch(nums,index,size-1,target);
            if(value1==-1&&value2==-1) return -1;
            else if(value1>=0){
                res=value1;
            }else if(value2>0){
                res=value2;
            }
        }else{
            value1=binarySearch(nums,0,size-1,target);
            if(value1==-1) return -1;
            else res=value1;
        }
        return res;
    }
